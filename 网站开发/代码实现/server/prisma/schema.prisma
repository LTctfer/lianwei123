// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  avatar      String?  @db.VarChar(255)
  role        Role     @default(USER)
  status      UserStatus @default(ACTIVE)
  emailVerified Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  profile     UserProfile?
  orders      Order[]
  cartItems   CartItem[]
  comments    Comment[]
  posts       Post[]
  likes       Like[]
  follows     Follow[] @relation("Follower")
  followers   Follow[] @relation("Following")
  addresses   Address[]

  @@map("users")
}

// 用户资料表
model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  firstName String?  @db.VarChar(50)
  lastName  String?  @db.VarChar(50)
  birthday  DateTime?
  gender    Gender?
  bio       String?  @db.Text
  website   String?  @db.VarChar(255)
  location  String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// 收货地址表
model Address {
  id        Int     @id @default(autoincrement())
  userId    Int
  name      String  @db.VarChar(50)
  phone     String  @db.VarChar(20)
  province  String  @db.VarChar(50)
  city      String  @db.VarChar(50)
  district  String  @db.VarChar(50)
  address   String  @db.VarChar(255)
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// 产品分类表
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  image       String?   @db.VarChar(255)
  parentId    Int?
  sort        Int       @default(0)
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// 产品表
model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String?  @db.Text
  content     String?  @db.LongText
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  costPrice   Decimal? @db.Decimal(10, 2)
  sku         String?  @unique @db.VarChar(100)
  barcode     String?  @db.VarChar(100)
  stock       Int      @default(0)
  weight      Decimal? @db.Decimal(8, 2)
  images      Json?
  tags        String?  @db.VarChar(500)
  seoTitle    String?  @db.VarChar(255)
  seoDescription String? @db.VarChar(500)
  status      Status   @default(ACTIVE)
  featured    Boolean  @default(false)
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  comments    Comment[]
  variants    ProductVariant[]

  @@fulltext([name, description])
  @@map("products")
}

// 产品变体表
model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String  @db.VarChar(100)
  value     String  @db.VarChar(100)
  price     Decimal? @db.Decimal(10, 2)
  stock     Int     @default(0)
  sku       String? @db.VarChar(100)
  image     String? @db.VarChar(255)
  sort      Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// 购物车表
model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// 订单表
model Order {
  id            Int         @id @default(autoincrement())
  orderNo       String      @unique @db.VarChar(50)
  userId        Int
  addressId     Int?
  totalAmount   Decimal     @db.Decimal(10, 2)
  shippingFee   Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount Decimal    @default(0) @db.Decimal(10, 2)
  finalAmount   Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  paymentMethod String?     @db.VarChar(50)
  paymentStatus PaymentStatus @default(PENDING)
  paymentTime   DateTime?
  shippingTime  DateTime?
  deliveryTime  DateTime?
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  address   Address?    @relation(fields: [addressId], references: [id])
  items     OrderItem[]
  payments  Payment[]

  @@map("orders")
}

// 订单项表
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// 支付记录表
model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int
  paymentNo     String        @unique @db.VarChar(100)
  method        String        @db.VarChar(50)
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  transactionId String?       @db.VarChar(255)
  gatewayResponse Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// 评论表
model Comment {
  id        Int           @id @default(autoincrement())
  userId    Int
  productId Int?
  postId    Int?
  parentId  Int?
  content   String        @db.Text
  rating    Int?          @db.TinyInt
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  product  Product?  @relation(fields: [productId], references: [id])
  post     Post?     @relation(fields: [postId], references: [id])
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  likes    Like[]

  @@map("comments")
}

// 文章/帖子表
model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  content     String    @db.LongText
  excerpt     String?   @db.Text
  featuredImage String? @db.VarChar(255)
  authorId    Int
  categoryId  Int?
  tags        String?   @db.VarChar(500)
  viewCount   Int       @default(0)
  likeCount   Int       @default(0)
  commentCount Int      @default(0)
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author    User      @relation(fields: [authorId], references: [id])
  category  Category? @relation(fields: [categoryId], references: [id])
  comments  Comment[]
  likes     Like[]

  @@fulltext([title, content])
  @@map("posts")
}

// 点赞表
model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

// 关注表
model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

// 系统配置表
model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(100)
  value     String   @db.Text
  type      String   @db.VarChar(50)
  group     String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// 枚举定义
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}